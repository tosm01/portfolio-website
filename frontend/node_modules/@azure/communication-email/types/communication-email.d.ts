import { KeyCredential } from '@azure/core-auth';
import { PipelineOptions } from '@azure/core-http';

/**
 * An object representing the email address and its display name
 */
export declare interface EmailAddress {
    /**
     * Email address.
     */
    email: string;
    /**
     * Email display name.
     */
    displayName?: string;
}

/**
 * Attachment to the email.
 */
export declare interface EmailAttachment {
    /**
     * Name of the attachment
     */
    name: string;
    /**
     * The type of attachment file.
     */
    attachmentType: EmailAttachmentType;
    /**
     * Base64 encoded contents of the attachment
     */
    contentBytesBase64: string;
}

/**
 * Defines values for EmailAttachmentType.
 */
export declare type EmailAttachmentType = "avi" | "bmp" | "doc" | "docm" | "docx" | "gif" | "jpeg" | "mp3" | "one" | "pdf" | "png" | "ppsm" | "ppsx" | "ppt" | "pptm" | "pptx" | "pub" | "rpmsg" | "rtf" | "tif" | "txt" | "vsd" | "wav" | "wma" | "xls" | "xlsb" | "xlsm" | "xlsx";

/**
 *  The Email service client.
 */
export declare class EmailClient {
    private readonly api;
    /**
     * Initializes a new instance of the EmailClient class.
     * @param connectionString - Connection string to connect to an Azure Communication Service resource.
     *                         Example: "endpoint=https://contoso.eastus.communications.azure.net/;accesskey=secret";
     * @param options - Optional. Options to configure the HTTP pipeline.
     */
    constructor(connectionString: string, options?: EmailClientOptions);
    /**
     * Initializes a new instance of the EmailClient class using an Azure KeyCredential.
     * @param endpoint - The endpoint of the service (ex: https://contoso.eastus.communications.azure.net).
     * @param credential - An object that is used to authenticate requests to the service. Use the Azure KeyCredential or `@azure/identity` to create a credential.
     * @param options - Optional. Options to configure the HTTP pipeline.
     */
    constructor(endpoint: string, credential: KeyCredential, options?: EmailClientOptions);
    /**
     * Queues an email message to be sent to one or more recipients
     * @param emailMessage - Message payload for sending an email
     */
    send(emailMessage: EmailMessage): Promise<SendEmailResult>;
    /**
     * Gets the status of a message sent previously.
     * @param messageId - System generated message id (GUID) returned from a previous call to send email
     */
    getSendStatus(messageId: string): Promise<SendStatusResult>;
}

/**
 * Client options used to configure SMS Client API requests.
 */
export declare interface EmailClientOptions extends PipelineOptions {
}

/**
 * Content of the email.
 */
export declare interface EmailContent {
    /**
     * Subject of the email message
     */
    subject: string;
    /**
     * Plain text version of the email message.
     */
    plainText?: string;
    /**
     * Html version of the email message.
     */
    html?: string;
}

/**
 * Custom header for email.
 */
export declare interface EmailCustomHeader {
    /**
     * Header name.
     */
    name: string;
    /**
     * Header value.
     */
    value: string;
}

/**
 * Defines values for EmailImportance.
 */
export declare type EmailImportance = "high" | "normal" | "low";

/**
 * Message payload for sending an email
 */
export declare interface EmailMessage {
    /**
     * Custom email headers to be passed.
     */
    customHeaders?: EmailCustomHeader[];
    /**
     * Sender email address from a verified domain.
     */
    sender: string;
    /**
     * Email content to be sent.
     */
    content: EmailContent;
    /**
     * The importance type for the email.
     */
    importance?: EmailImportance;
    /**
     * Recipients for the email.
     */
    recipients: EmailRecipients;
    /**
     * list of attachments
     */
    attachments?: EmailAttachment[];
    /**
     * Email addresses where recipients' replies will be sent to.
     */
    replyTo?: EmailAddress[];
    /**
     * Indicates whether user engagement tracking should be disabled for this request if the resource-level user engagement tracking setting was already enabled in the control plane.
     */
    disableUserEngagementTracking?: boolean;
}

/**
 * Recipients of the email
 */
export declare interface EmailRecipients {
    /**
     * Email to recipients
     */
    to: EmailAddress[];
    /**
     * Email cc recipients
     */
    cC?: EmailAddress[];
    /**
     * Email bcc recipients
     */
    bCC?: EmailAddress[];
}

/**
 * Results of a sent email.
 */
export declare interface SendEmailResult {
    /**
     * MessageId of the sent email.
     */
    messageId: string;
}

/**
 * Defines values for SendStatus.
 */
export declare type SendStatus = "queued" | "outForDelivery" | "dropped";

/**
 * Status of an email message that was sent previously.
 */
export declare interface SendStatusResult {
    /**
     * System generated id of an email message sent.
     */
    messageId: string;
    /**
     * The type indicating the status of a request.
     */
    status: SendStatus;
}

export { }
