'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var coreHttp = require('@azure/core-http');
var communicationCommon = require('@azure/communication-common');
var logger$1 = require('@azure/logger');
var uuid = require('uuid');

function _interopNamespace(e) {
    if (e && e.__esModule) return e;
    var n = Object.create(null);
    if (e) {
        Object.keys(e).forEach(function (k) {
            if (k !== 'default') {
                var d = Object.getOwnPropertyDescriptor(e, k);
                Object.defineProperty(n, k, d.get ? d : {
                    enumerable: true,
                    get: function () { return e[k]; }
                });
            }
        });
    }
    n["default"] = e;
    return Object.freeze(n);
}

var coreHttp__namespace = /*#__PURE__*/_interopNamespace(coreHttp);

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const SendStatusResult = {
    type: {
        name: "Composite",
        className: "SendStatusResult",
        modelProperties: {
            messageId: {
                serializedName: "messageId",
                required: true,
                type: {
                    name: "String"
                }
            },
            status: {
                serializedName: "status",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const CommunicationErrorResponse = {
    type: {
        name: "Composite",
        className: "CommunicationErrorResponse",
        modelProperties: {
            error: {
                serializedName: "error",
                type: {
                    name: "Composite",
                    className: "CommunicationError"
                }
            }
        }
    }
};
const CommunicationError = {
    type: {
        name: "Composite",
        className: "CommunicationError",
        modelProperties: {
            code: {
                serializedName: "code",
                required: true,
                type: {
                    name: "String"
                }
            },
            message: {
                serializedName: "message",
                required: true,
                type: {
                    name: "String"
                }
            },
            target: {
                serializedName: "target",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            details: {
                serializedName: "details",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: { name: "Composite", className: "CommunicationError" }
                    }
                }
            },
            innerError: {
                serializedName: "innererror",
                type: {
                    name: "Composite",
                    className: "CommunicationError"
                }
            }
        }
    }
};
const EmailMessage = {
    type: {
        name: "Composite",
        className: "EmailMessage",
        modelProperties: {
            customHeaders: {
                serializedName: "headers",
                type: {
                    name: "Sequence",
                    element: {
                        type: { name: "Composite", className: "EmailCustomHeader" }
                    }
                }
            },
            sender: {
                serializedName: "sender",
                required: true,
                type: {
                    name: "String"
                }
            },
            content: {
                serializedName: "content",
                type: {
                    name: "Composite",
                    className: "EmailContent"
                }
            },
            importance: {
                defaultValue: "normal",
                serializedName: "importance",
                type: {
                    name: "String"
                }
            },
            recipients: {
                serializedName: "recipients",
                type: {
                    name: "Composite",
                    className: "EmailRecipients"
                }
            },
            attachments: {
                serializedName: "attachments",
                type: {
                    name: "Sequence",
                    element: { type: { name: "Composite", className: "EmailAttachment" } }
                }
            },
            replyTo: {
                serializedName: "replyTo",
                type: {
                    name: "Sequence",
                    element: { type: { name: "Composite", className: "EmailAddress" } }
                }
            },
            disableUserEngagementTracking: {
                serializedName: "disableUserEngagementTracking",
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
const EmailCustomHeader = {
    type: {
        name: "Composite",
        className: "EmailCustomHeader",
        modelProperties: {
            name: {
                serializedName: "name",
                required: true,
                type: {
                    name: "String"
                }
            },
            value: {
                serializedName: "value",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const EmailContent = {
    type: {
        name: "Composite",
        className: "EmailContent",
        modelProperties: {
            subject: {
                serializedName: "subject",
                required: true,
                type: {
                    name: "String"
                }
            },
            plainText: {
                serializedName: "plainText",
                type: {
                    name: "String"
                }
            },
            html: {
                serializedName: "html",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const EmailRecipients = {
    type: {
        name: "Composite",
        className: "EmailRecipients",
        modelProperties: {
            to: {
                serializedName: "to",
                required: true,
                type: {
                    name: "Sequence",
                    element: { type: { name: "Composite", className: "EmailAddress" } }
                }
            },
            cC: {
                serializedName: "cC",
                type: {
                    name: "Sequence",
                    element: { type: { name: "Composite", className: "EmailAddress" } }
                }
            },
            bCC: {
                serializedName: "bCC",
                type: {
                    name: "Sequence",
                    element: { type: { name: "Composite", className: "EmailAddress" } }
                }
            }
        }
    }
};
const EmailAddress = {
    type: {
        name: "Composite",
        className: "EmailAddress",
        modelProperties: {
            email: {
                serializedName: "email",
                required: true,
                type: {
                    name: "String"
                }
            },
            displayName: {
                serializedName: "displayName",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const EmailAttachment = {
    type: {
        name: "Composite",
        className: "EmailAttachment",
        modelProperties: {
            name: {
                serializedName: "name",
                required: true,
                type: {
                    name: "String"
                }
            },
            attachmentType: {
                serializedName: "attachmentType",
                required: true,
                type: {
                    name: "String"
                }
            },
            contentBytesBase64: {
                serializedName: "contentBytesBase64",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const EmailGetSendStatusHeaders = {
    type: {
        name: "Composite",
        className: "EmailGetSendStatusHeaders",
        modelProperties: {
            retryAfter: {
                serializedName: "retry-after",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const EmailSendHeaders = {
    type: {
        name: "Composite",
        className: "EmailSendHeaders",
        modelProperties: {
            repeatabilityResult: {
                serializedName: "repeatability-result",
                type: {
                    name: "String"
                }
            },
            operationLocation: {
                serializedName: "operation-location",
                type: {
                    name: "String"
                }
            },
            retryAfter: {
                serializedName: "retry-after",
                type: {
                    name: "Number"
                }
            },
            xMsRequestId: {
                serializedName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            }
        }
    }
};

var Mappers = /*#__PURE__*/Object.freeze({
    __proto__: null,
    SendStatusResult: SendStatusResult,
    CommunicationErrorResponse: CommunicationErrorResponse,
    CommunicationError: CommunicationError,
    EmailMessage: EmailMessage,
    EmailCustomHeader: EmailCustomHeader,
    EmailContent: EmailContent,
    EmailRecipients: EmailRecipients,
    EmailAddress: EmailAddress,
    EmailAttachment: EmailAttachment,
    EmailGetSendStatusHeaders: EmailGetSendStatusHeaders,
    EmailSendHeaders: EmailSendHeaders
});

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const endpoint = {
    parameterPath: "endpoint",
    mapper: {
        serializedName: "endpoint",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
const messageId = {
    parameterPath: "messageId",
    mapper: {
        serializedName: "messageId",
        required: true,
        type: {
            name: "String"
        }
    }
};
const apiVersion = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2021-10-01-preview",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String"
        }
    }
};
const contentType = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String"
        }
    }
};
const emailMessage = {
    parameterPath: "emailMessage",
    mapper: EmailMessage
};
const repeatabilityRequestId = {
    parameterPath: "repeatabilityRequestId",
    mapper: {
        serializedName: "repeatability-request-id",
        required: true,
        type: {
            name: "String"
        }
    }
};
const repeatabilityFirstSent = {
    parameterPath: "repeatabilityFirstSent",
    mapper: {
        serializedName: "repeatability-first-sent",
        required: true,
        type: {
            name: "String"
        }
    }
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/**
 * Class representing a Email.
 */
class Email {
    /**
     * Initialize a new instance of the class Email class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Gets the status of a message sent previously.
     * @param messageId System generated message id (GUID) returned from a previous call to send email
     * @param options The options parameters.
     */
    getSendStatus(messageId, options) {
        const operationOptions = coreHttp__namespace.operationOptionsToRequestOptionsBase(options || {});
        return this.client.sendOperationRequest({ messageId, options: operationOptions }, getSendStatusOperationSpec);
    }
    /**
     * Queues an email message to be sent to one or more recipients
     * @param repeatabilityRequestId If specified, the client directs that the request is repeatable; that
     *                               is, that the client can make the request multiple times with the same Repeatability-Request-Id and
     *                               get back an appropriate response without the server executing the request multiple times. The value
     *                               of the Repeatability-Request-Id is an opaque string representing a client-generated, globally unique
     *                               for all time, identifier for the request. It is recommended to use version 4 (random) UUIDs.
     * @param repeatabilityFirstSent Must be sent by clients to specify that a request is repeatable.
     *                               Repeatability-First-Sent is used to specify the date and time at which the request was first created
     *                               in the IMF-fix date form of HTTP-date as defined in RFC7231. eg- Tue, 26 Mar 2019 16:06:51 GMT
     * @param emailMessage Message payload for sending an email
     * @param options The options parameters.
     */
    send(repeatabilityRequestId, repeatabilityFirstSent, emailMessage, options) {
        const operationOptions = coreHttp__namespace.operationOptionsToRequestOptionsBase(options || {});
        return this.client.sendOperationRequest({
            repeatabilityRequestId,
            repeatabilityFirstSent,
            emailMessage,
            options: operationOptions
        }, sendOperationSpec);
    }
}
// Operation Specifications
const serializer = new coreHttp__namespace.Serializer(Mappers, /* isXml */ false);
const getSendStatusOperationSpec = {
    path: "/emails/{messageId}/status",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: SendStatusResult,
            headersMapper: EmailGetSendStatusHeaders
        },
        default: {
            bodyMapper: CommunicationErrorResponse,
            headersMapper: EmailGetSendStatusHeaders
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [endpoint, messageId],
    serializer
};
const sendOperationSpec = {
    path: "/emails:send",
    httpMethod: "POST",
    responses: {
        202: {
            headersMapper: EmailSendHeaders
        },
        default: {
            bodyMapper: CommunicationErrorResponse,
            headersMapper: EmailSendHeaders
        }
    },
    requestBody: emailMessage,
    queryParameters: [apiVersion],
    urlParameters: [endpoint],
    headerParameters: [
        contentType,
        repeatabilityRequestId,
        repeatabilityFirstSent
    ],
    mediaType: "json",
    serializer
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const packageName = "@azure/communication-email";
const packageVersion = "1.0.0-beta.1";
class EmailRestApiClientContext extends coreHttp__namespace.ServiceClient {
    /**
     * Initializes a new instance of the EmailRestApiClientContext class.
     * @param endpoint The communication resource, for example https://my-resource.communication.azure.com
     * @param options The parameter options
     */
    constructor(endpoint, options) {
        if (endpoint === undefined) {
            throw new Error("'endpoint' cannot be null");
        }
        // Initializing default values for options
        if (!options) {
            options = {};
        }
        if (!options.userAgent) {
            const defaultUserAgent = coreHttp__namespace.getDefaultUserAgentValue();
            options.userAgent = `${packageName}/${packageVersion} ${defaultUserAgent}`;
        }
        super(undefined, options);
        this.requestContentType = "application/json; charset=utf-8";
        this.baseUri = options.endpoint || "{endpoint}";
        // Parameter assignments
        this.endpoint = endpoint;
        // Assigning values to Constant parameters
        this.apiVersion = options.apiVersion || "2021-10-01-preview";
    }
}

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
class EmailRestApiClient extends EmailRestApiClientContext {
    /**
     * Initializes a new instance of the EmailRestApiClient class.
     * @param endpoint The communication resource, for example https://my-resource.communication.azure.com
     * @param options The parameter options
     */
    constructor(endpoint, options) {
        super(endpoint, options);
        this.email = new Email(this);
    }
}

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
const SDK_VERSION = "1.0.0-beta.1";

// Copyright (c) Microsoft Corporation.
/**
 * The \@azure/logger configuration for this package.
 */
const logger = logger$1.createClientLogger("communication-email");

// Copyright (c) Microsoft Corporation.
/**
 * Checks whether the type of a value is EmailClientOptions or not.
 *
 * @param options - The value being checked.
 */
const isEmailClientOptions = (options) => !!options && !communicationCommon.isKeyCredential(options);
/**
 *  The Email service client.
 */
class EmailClient {
    constructor(connectionStringOrUrl, credentialOrOptions, maybeOptions = {}) {
        const { url, credential } = communicationCommon.parseClientArguments(connectionStringOrUrl, credentialOrOptions);
        const options = isEmailClientOptions(credentialOrOptions) ? credentialOrOptions : maybeOptions;
        const libInfo = `azsdk-js-communication-email/${SDK_VERSION}`;
        if (!options.userAgentOptions) {
            options.userAgentOptions = {};
        }
        if (options.userAgentOptions.userAgentPrefix) {
            options.userAgentOptions.userAgentPrefix = `${options.userAgentOptions.userAgentPrefix} ${libInfo}`;
        }
        else {
            options.userAgentOptions.userAgentPrefix = libInfo;
        }
        const internalPipelineOptions = Object.assign(Object.assign({}, options), {
            loggingOptions: {
                logger: logger.info,
            },
        });
        const authPolicy = communicationCommon.createCommunicationAuthPolicy(credential);
        const pipeline = coreHttp.createPipelineFromOptions(internalPipelineOptions, authPolicy);
        this.api = new EmailRestApiClient(url, pipeline);
    }
    /**
     * Queues an email message to be sent to one or more recipients
     * @param emailMessage - Message payload for sending an email
     */
    async send(emailMessage) {
        var _a;
        const response = await this.api.email.send(uuid.v4(), new Date().toUTCString(), emailMessage);
        return {
            messageId: (_a = response.xMsRequestId) !== null && _a !== void 0 ? _a : "",
        };
    }
    /**
     * Gets the status of a message sent previously.
     * @param messageId - System generated message id (GUID) returned from a previous call to send email
     */
    async getSendStatus(messageId) {
        const response = await this.api.email.getSendStatus(messageId);
        return {
            messageId: response.messageId,
            status: response.status,
        };
    }
}

exports.EmailClient = EmailClient;
//# sourceMappingURL=index.js.map
