{"version":3,"file":"emailClient.spec.js","sourceRoot":"","sources":["../../../test/public/emailClient.spec.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { EmailClient, EmailMessage } from \"../../src\";\nimport { Recorder, env } from \"@azure-tools/test-recorder\";\nimport {\n  createRecordedEmailClientWithConnectionString,\n  createRecordedEmailClientWithKeyCredential,\n} from \"./utils/recordedClient\";\nimport { Context } from \"mocha\";\nimport { assert } from \"chai\";\nimport { matrix } from \"@azure/test-utils\";\n\nmatrix([[true, false]], async function (useKeyCredential) {\n  describe(`EmailClient [Playback/Live]${\n    useKeyCredential ? \" [KeyCredential]\" : \" [ConnectionString]\"\n  }`, () => {\n    let recorder: Recorder;\n    let client: EmailClient;\n\n    beforeEach(function (this: Context) {\n      if (useKeyCredential) {\n        ({ client, recorder } = createRecordedEmailClientWithKeyCredential(this));\n      } else {\n        ({ client, recorder } = createRecordedEmailClientWithConnectionString(this));\n      }\n    });\n\n    afterEach(async function (this: Context) {\n      if (!this.currentTest?.isPending()) {\n        await recorder.stop();\n      }\n    });\n\n    it(\"successfully sends an email to a single recipient\", async function () {\n      const emailMessage: EmailMessage = {\n        sender: env.SENDER_ADDRESS,\n        recipients: {\n          to: [\n            {\n              email: env.RECIPIENT_ADDRESS,\n              displayName: \"someRecipient\",\n            },\n          ],\n        },\n        content: {\n          subject: \"someSubject\",\n          plainText: \"somePlainTextBody\",\n          html: \"<html><h1>someHtmlBody</html>\",\n        },\n      };\n\n      const response = await client.send(emailMessage);\n      assert.isNotNull(response.messageId);\n    }).timeout(5000);\n\n    it(\"successfully sends an email to multiple types of recipients\", async function () {\n      const emailMessage: EmailMessage = {\n        sender: env.SENDER_ADDRESS,\n        recipients: {\n          to: [\n            {\n              email: env.RECIPIENT_ADDRESS,\n              displayName: \"someRecipient\",\n            },\n            {\n              email: env.RECIPIENT_ADDRESS,\n              displayName: \"someRecipient\",\n            },\n          ],\n          cC: [\n            {\n              email: env.RECIPIENT_ADDRESS,\n              displayName: \"someRecipient\",\n            },\n          ],\n          bCC: [\n            {\n              email: env.RECIPIENT_ADDRESS,\n              displayName: \"someRecipient\",\n            },\n          ],\n        },\n        content: {\n          subject: \"someSubject\",\n          plainText: \"somePlainTextBody\",\n          html: \"<html><h1>someHtmlBody</html>\",\n        },\n      };\n\n      const response = await client.send(emailMessage);\n      assert.isNotNull(response.messageId);\n    }).timeout(5000);\n\n    it(\"successfully sends an email with an attachment\", async function () {\n      const emailMessage: EmailMessage = {\n        sender: env.SENDER_ADDRESS,\n        recipients: {\n          to: [\n            {\n              email: env.RECIPIENT_ADDRESS,\n              displayName: \"someRecipient\",\n            },\n          ],\n        },\n        content: {\n          subject: \"someSubject\",\n          plainText: \"somePlainTextBody\",\n          html: \"<html><h1>someHtmlBody</html>\",\n        },\n        attachments: [\n          {\n            name: \"readme.txt\",\n            attachmentType: \"txt\",\n            contentBytesBase64: \"ZW1haWwgdGVzdCBhdHRhY2htZW50\",\n          },\n        ],\n      };\n\n      const response = await client.send(emailMessage);\n      assert.isNotNull(response.messageId);\n    }).timeout(5000);\n\n    it(\"successfully retrieves the email status with the returned message id\", async function () {\n      const emailMessage: EmailMessage = {\n        sender: env.SENDER_ADDRESS,\n        recipients: {\n          to: [\n            {\n              email: env.RECIPIENT_ADDRESS,\n              displayName: \"someRecipient\",\n            },\n          ],\n        },\n        content: {\n          subject: \"someSubject\",\n          plainText: \"somePlainTextBody\",\n          html: \"<html><h1>someHtmlBody</html>\",\n        },\n      };\n\n      const response = await client.send(emailMessage);\n      const messageId = response.messageId;\n      if (messageId) {\n        const messageStatusResponse = await client.getSendStatus(messageId);\n        assert.isNotNull(messageStatusResponse.status);\n      } else {\n        assert.fail();\n      }\n    }).timeout(5000);\n  });\n});\n"]}