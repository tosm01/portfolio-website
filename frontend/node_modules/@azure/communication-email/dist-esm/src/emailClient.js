// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
import { createPipelineFromOptions, } from "@azure/core-http";
import { createCommunicationAuthPolicy, isKeyCredential, parseClientArguments, } from "@azure/communication-common";
import { EmailRestApiClient } from "./generated/src/emailRestApiClient";
import { SDK_VERSION } from "./constants";
import { logger } from "./logger";
import { v4 as uuid } from "uuid";
/**
 * Checks whether the type of a value is EmailClientOptions or not.
 *
 * @param options - The value being checked.
 */
const isEmailClientOptions = (options) => !!options && !isKeyCredential(options);
/**
 *  The Email service client.
 */
export class EmailClient {
    constructor(connectionStringOrUrl, credentialOrOptions, maybeOptions = {}) {
        const { url, credential } = parseClientArguments(connectionStringOrUrl, credentialOrOptions);
        const options = isEmailClientOptions(credentialOrOptions) ? credentialOrOptions : maybeOptions;
        const libInfo = `azsdk-js-communication-email/${SDK_VERSION}`;
        if (!options.userAgentOptions) {
            options.userAgentOptions = {};
        }
        if (options.userAgentOptions.userAgentPrefix) {
            options.userAgentOptions.userAgentPrefix = `${options.userAgentOptions.userAgentPrefix} ${libInfo}`;
        }
        else {
            options.userAgentOptions.userAgentPrefix = libInfo;
        }
        const internalPipelineOptions = Object.assign(Object.assign({}, options), {
            loggingOptions: {
                logger: logger.info,
            },
        });
        const authPolicy = createCommunicationAuthPolicy(credential);
        const pipeline = createPipelineFromOptions(internalPipelineOptions, authPolicy);
        this.api = new EmailRestApiClient(url, pipeline);
    }
    /**
     * Queues an email message to be sent to one or more recipients
     * @param emailMessage - Message payload for sending an email
     */
    async send(emailMessage) {
        var _a;
        const response = await this.api.email.send(uuid(), new Date().toUTCString(), emailMessage);
        return {
            messageId: (_a = response.xMsRequestId) !== null && _a !== void 0 ? _a : "",
        };
    }
    /**
     * Gets the status of a message sent previously.
     * @param messageId - System generated message id (GUID) returned from a previous call to send email
     */
    async getSendStatus(messageId) {
        const response = await this.api.email.getSendStatus(messageId);
        return {
            messageId: response.messageId,
            status: response.status,
        };
    }
}
//# sourceMappingURL=emailClient.js.map