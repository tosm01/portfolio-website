{"version":3,"file":"emailClient.js","sourceRoot":"","sources":["../../src/emailClient.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAGlC,OAAO,EAIL,yBAAyB,GAC1B,MAAM,kBAAkB,CAAC;AAC1B,OAAO,EACL,6BAA6B,EAC7B,eAAe,EACf,oBAAoB,GACrB,MAAM,6BAA6B,CAAC;AACrC,OAAO,EAAE,kBAAkB,EAAE,MAAM,oCAAoC,CAAC;AAExE,OAAO,EAAE,WAAW,EAAE,MAAM,aAAa,CAAC;AAC1C,OAAO,EAAE,MAAM,EAAE,MAAM,UAAU,CAAC;AAClC,OAAO,EAAE,EAAE,IAAI,IAAI,EAAE,MAAM,MAAM,CAAC;AAElC;;;;GAIG;AACH,MAAM,oBAAoB,GAAG,CAAC,OAAY,EAAiC,EAAE,CAC3E,CAAC,CAAC,OAAO,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC;AAEzC;;GAEG;AACH,MAAM,OAAO,WAAW;IAmBtB,YACE,qBAA6B,EAC7B,mBAAwD,EACxD,eAAmC,EAAE;QAErC,MAAM,EAAE,GAAG,EAAE,UAAU,EAAE,GAAG,oBAAoB,CAAC,qBAAqB,EAAE,mBAAmB,CAAC,CAAC;QAC7F,MAAM,OAAO,GAAG,oBAAoB,CAAC,mBAAmB,CAAC,CAAC,CAAC,CAAC,mBAAmB,CAAC,CAAC,CAAC,YAAY,CAAC;QAC/F,MAAM,OAAO,GAAG,gCAAgC,WAAW,EAAE,CAAC;QAE9D,IAAI,CAAC,OAAO,CAAC,gBAAgB,EAAE;YAC7B,OAAO,CAAC,gBAAgB,GAAG,EAAE,CAAC;SAC/B;QAED,IAAI,OAAO,CAAC,gBAAgB,CAAC,eAAe,EAAE;YAC5C,OAAO,CAAC,gBAAgB,CAAC,eAAe,GAAG,GAAG,OAAO,CAAC,gBAAgB,CAAC,eAAe,IAAI,OAAO,EAAE,CAAC;SACrG;aAAM;YACL,OAAO,CAAC,gBAAgB,CAAC,eAAe,GAAG,OAAO,CAAC;SACpD;QAED,MAAM,uBAAuB,mCACxB,OAAO,GACP;YACD,cAAc,EAAE;gBACd,MAAM,EAAE,MAAM,CAAC,IAAI;aACpB;SACF,CACF,CAAC;QAEF,MAAM,UAAU,GAAyB,6BAA6B,CAAC,UAAU,CAAC,CAAC;QACnF,MAAM,QAAQ,GAAyB,yBAAyB,CAC9D,uBAAuB,EACvB,UAAU,CACX,CAAC;QAEF,IAAI,CAAC,GAAG,GAAG,IAAI,kBAAkB,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC;IACnD,CAAC;IAED;;;OAGG;IACI,KAAK,CAAC,IAAI,CAAC,YAA0B;;QAC1C,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,EAAE,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE,EAAE,YAAY,CAAC,CAAC;QAE3F,OAAO;YACL,SAAS,EAAE,MAAA,QAAQ,CAAC,YAAY,mCAAI,EAAE;SACvC,CAAC;IACJ,CAAC;IAED;;;OAGG;IACI,KAAK,CAAC,aAAa,CAAC,SAAiB;QAC1C,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC;QAE/D,OAAO;YACL,SAAS,EAAE,QAAQ,CAAC,SAAS;YAC7B,MAAM,EAAE,QAAQ,CAAC,MAAM;SACxB,CAAC;IACJ,CAAC;CACF","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { EmailClientOptions, EmailMessage, SendEmailResult, SendStatusResult } from \"./models\";\nimport {\n  InternalPipelineOptions,\n  RequestPolicyFactory,\n  ServiceClientOptions,\n  createPipelineFromOptions,\n} from \"@azure/core-http\";\nimport {\n  createCommunicationAuthPolicy,\n  isKeyCredential,\n  parseClientArguments,\n} from \"@azure/communication-common\";\nimport { EmailRestApiClient } from \"./generated/src/emailRestApiClient\";\nimport { KeyCredential } from \"@azure/core-auth\";\nimport { SDK_VERSION } from \"./constants\";\nimport { logger } from \"./logger\";\nimport { v4 as uuid } from \"uuid\";\n\n/**\n * Checks whether the type of a value is EmailClientOptions or not.\n *\n * @param options - The value being checked.\n */\nconst isEmailClientOptions = (options: any): options is EmailClientOptions =>\n  !!options && !isKeyCredential(options);\n\n/**\n *  The Email service client.\n */\nexport class EmailClient {\n  private readonly api: EmailRestApiClient;\n\n  /**\n   * Initializes a new instance of the EmailClient class.\n   * @param connectionString - Connection string to connect to an Azure Communication Service resource.\n   *                         Example: \"endpoint=https://contoso.eastus.communications.azure.net/;accesskey=secret\";\n   * @param options - Optional. Options to configure the HTTP pipeline.\n   */\n  constructor(connectionString: string, options?: EmailClientOptions);\n\n  /**\n   * Initializes a new instance of the EmailClient class using an Azure KeyCredential.\n   * @param endpoint - The endpoint of the service (ex: https://contoso.eastus.communications.azure.net).\n   * @param credential - An object that is used to authenticate requests to the service. Use the Azure KeyCredential or `@azure/identity` to create a credential.\n   * @param options - Optional. Options to configure the HTTP pipeline.\n   */\n  constructor(endpoint: string, credential: KeyCredential, options?: EmailClientOptions);\n\n  constructor(\n    connectionStringOrUrl: string,\n    credentialOrOptions?: EmailClientOptions | KeyCredential,\n    maybeOptions: EmailClientOptions = {}\n  ) {\n    const { url, credential } = parseClientArguments(connectionStringOrUrl, credentialOrOptions);\n    const options = isEmailClientOptions(credentialOrOptions) ? credentialOrOptions : maybeOptions;\n    const libInfo = `azsdk-js-communication-email/${SDK_VERSION}`;\n\n    if (!options.userAgentOptions) {\n      options.userAgentOptions = {};\n    }\n\n    if (options.userAgentOptions.userAgentPrefix) {\n      options.userAgentOptions.userAgentPrefix = `${options.userAgentOptions.userAgentPrefix} ${libInfo}`;\n    } else {\n      options.userAgentOptions.userAgentPrefix = libInfo;\n    }\n\n    const internalPipelineOptions: InternalPipelineOptions = {\n      ...options,\n      ...{\n        loggingOptions: {\n          logger: logger.info,\n        },\n      },\n    };\n\n    const authPolicy: RequestPolicyFactory = createCommunicationAuthPolicy(credential);\n    const pipeline: ServiceClientOptions = createPipelineFromOptions(\n      internalPipelineOptions,\n      authPolicy\n    );\n\n    this.api = new EmailRestApiClient(url, pipeline);\n  }\n\n  /**\n   * Queues an email message to be sent to one or more recipients\n   * @param emailMessage - Message payload for sending an email\n   */\n  public async send(emailMessage: EmailMessage): Promise<SendEmailResult> {\n    const response = await this.api.email.send(uuid(), new Date().toUTCString(), emailMessage);\n\n    return {\n      messageId: response.xMsRequestId ?? \"\",\n    };\n  }\n\n  /**\n   * Gets the status of a message sent previously.\n   * @param messageId - System generated message id (GUID) returned from a previous call to send email\n   */\n  public async getSendStatus(messageId: string): Promise<SendStatusResult> {\n    const response = await this.api.email.getSendStatus(messageId);\n\n    return {\n      messageId: response.messageId,\n      status: response.status,\n    };\n  }\n}\n"]}